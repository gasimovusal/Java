
create new class RemoteJavaClass.java
create new file
do git pull => your github code will be in intelij

how t push only one specific file
Create a new java class : ForthJavaClass
Create another JAVA class: FifthJavaClass
Create a new commit to push only ForthJavaClass
Create another commit to push only FifthJavaClass
Add specific class ==> git add "src/Forth_Java_Class.java"

git reset --hard origin/master

git reset --hard origin/main

how to ignore a file
.gitignore
-we create .gitignore file in project level
we add math of class that we want to ignore
for example, if you ad


git pull => git fetch + git merge
git fetch => brings update on local ro
git merge => merges local git and remote github code

error:::
error: failed to push sme refs to '...'
if there is code github.com and you did not pull that code, you will get error => pull before push
github is dominant repo, whatever in github has to be in intelij otherwise we will get error

CONFLICT
if github and intelij has different codes in same line
if local and remote has different codes on the sam eline, then we get conflict when we merge local and remote codes
conflicts usually happens when different people writes different codes on the same lines
Steps to solve conflict manually:
auto merge or manual fix(recommended)
remove the conflict code from local or edit the entire codes
git add . ; git commit -m "conflict resolved" ; git push

Master Branch ==> where all final codes gets collected
                    we do not use master branch to write our code / push codes
                    master branch is protected
                    we cerate new branch
Creating new branch => its copy of master branch,
                        your code will be checked someone
                        if your code is good, it will be merged in master branch


*git branch OR git branch -a -> Shows all branches. Default branch is the master branch
* git branch feature        -> creates new branch named feature. This is the copy based on current branch.
* git checkout feature      -> switch to feature branch
* git branch -d feature       -> delete feature branch
* git checkout master        -> switch to master branch
* git merge feature        -> If you run this when you are on master branch, then feature branch codes merges into master branch
*git merge master            -> If you run this when you are on feature branch, then master branch codes merges into feature branch
git push --set-upstream origin feature -> use when you push for the FIRST TIME. After the first time, git push is enough